
Answers

1. b  O(√N)
2. e  O(N²)
3. c  O(N)
4. d  O(N log N)
5. a  O(log N)
6. c  O(N)


Reasoning

1.  At the end of each loop iteration, d is exactly equal
    to the square of n, the variable that keeps track of
    the number of iterations. So at termination, d ⩰ √N. 
    Hence, the time complexity is in O(√N).
    The fragment is based on the formula for the sum of
    the first n integers, but manipulates this in such a
    way, that d becomes the exact square of n, and not
    n*(n+1)/2.

2.  The outer loop is linear: it runs N times. The inner 
    loop runs at most N/2 times when i = 0. Since the loops 
    are nested, the time complexity is in O(N²).

3.  In each iteration, the value of i is incremented by 
    either 1 or 2. The loop terminates when i reaches N. 
    Hence, the time complexity is in O(N).

4.  The outer loop is linear: it runs N times. The inner loop 
    runs at most log N times. Since the loops are nested, 
    the time complexity is in O(N log N).

5.  We can interpret l and r as indexes indicating the left
    and right end of a sequence of N elements. 
    The variable m keeps taking the arithmetic mean of these 
    two indexes. Going through the sequence of N elements, 
    either l or r is subsequently set to m, thus halving the 
    number of elements to consider in each iteration until 
    there are no more elements left to consider. Hence, just 
    like a binary search algorithm, the time complexity is 
    in O(log N).

6.  The outer loop runs in O(√N), and the inner loop as well.
    The two loops are nested, so the overall time complexity 
    is in O(N).


