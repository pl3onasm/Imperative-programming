
Answers

1. b  O(√N)
2. e  O(N²)
3. c  O(N)
4. d  O(N log N)
5. a  O(√N)
6. c  O(N)


Reasoning 

1.  In each iteration i is incremented by one, and s takes the
    total sum of the sum so far and the current value of i. 
    Overall, s is thus taking the sum of the first i integers, 
    and so s = i*(i+1)/2. Hence, the time complexity is in O(√N).

2.  The number of iterations is determined by the number of times 
    i is incremented. In each iteration, i is incremented by 2, 
    and the loop terminates when i is equal to j = N². Hence, 
    there are (N/2)² iterations and the time complexity is in O(N²).

3.  The outer loop runs N times, while the inner loop runs 5 times.
    The loops are nested, so there will be 5*N iterations in total.
    Hence, the overall time complexity is in O(N).

4.  The outer loop is linear in N: it iterates N times. In each 
    iteration, j is set to the current value of i, and then j is 
    halved until j is less than 1. The inner loop thus runs in 
    O(log N). The two loops are nested, so the overall time 
    complexity is in O(N log N).

5.  At termination, 3 has been multiplied i times by itself, so 
    that we get:
        3ⁱ = N² ⇔ i*log₃(3) = log₃(N²) ⇔ i = 2*log₃(N)  
    Thus, the loop has run 2*log₃(N) times, and the overall time 
    complexity is in O(log N).

6.  The loop index i is initialized to N and then decremented by
    two after each iteration. At termination, the loop will have
    iterated N/4 times. Hence, the time complexity is in O(N).


