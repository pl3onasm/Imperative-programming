
Answers

1. a  O(log N)
2. e  O(N²)
3. b  O(√N)
4. a  O(log N)
5. d  O(N log N)
6. d  O(N log N)


Reasoning

1.  At termination, the loop has approximately run 
    log(N - log N) times, since j is halved until it meets 
    the number of iterations that is kept by i. The loop 
    body is in O(1), so the overall time complexity is 
    in O(log N).

2.  The outer loop runs N times. The inner for loop runs 
    at most N times (when i = 0). The loop body is in O(1), 
    so the overall time complexity is in O(N²), since the 
    two loops are nested.

3.  At the end of each iteration, i is exactly equal to
    the square of j. Compare this to question 1 (problem 3) 
    of the exam from 2014, and notice how the order of the 
    two operations within the loop differs and changes the 
    value by which i is incremented. Here we need to add 1 
    to 2*j to get the same result, because j only gets 
    incremented at the end. 
    The overall time complexity is thus in O(√N).

4.  The variable i is doubled in each iteration. The fact
    that j is decremented each time, makes it even run a 
    bit faster. Hence, the overall time complexity is 
    in O(log N).

5.  The outer for loop runs log₃(N) times. The inner loop
    runs at most N-1 times (when i = N-1). The loop body 
    is in O(1), so the overall time complexity is in 
    O(N log N), since the two loops are nested. 

6.  The outer loop is linear. In each iteration of the 
    outer loop, s = i*(i+1)/2 and the inner loop runs 
    log(s) times. Since i is at most N-1, the inner loop 
    runs at most approximately log(N²) = 2*log(N) times. 
    Thus, the overall time complexity is in O(N log N).


