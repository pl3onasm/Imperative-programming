
Answers

1. e  O(N²)
2. a  O(log N)
3. c  O(N)
4. b  O(√N)
5. d  O(N log N)
6. c  O(N)


Reasoning

1.  The two loops are independent, so the overall complexity 
    is determined by the loop with the most iterations, and 
    that is the second loop. 
    The first loop iterates N times. While i goes by each 
    integer from N to 1, the variable j is taking the running 
    sum. Thus, at termination of the first loop, j = N(N+1)/2.
    The second loop then iterates j-5 times. So, this loop's 
    complexity is in O(N²) and determines the fragment's  
    overall complexity.

2.  In each iteration, i is doubled, so that at the loop's 
    termination, we have 2ⁱ ⩰ N², i.e. i ⩰ 2*log(N). 
    Hence, the time complexity is in O(log N).

3.  The variable s doesn't affect the fragment's complexity. 
    At the loop's termination, it will have run 7*N/3 - 42
    times. So, the fragment's time complexity is in O(N).

4.  After the first loop terminates, s = i² ⩰ N, so that 
    i ⩰ √N. So the first loop's complexity is in O(√N). 
    The second loop iterates i times, and its complexity
    is therefore in O(√N) as well. Since the loops aren't 
    nested, the overall complexity is thus in O(√N).

5.  The outer for loop has log(N) iterations, as i is 
    halved after each iteration. The inner for loop has at
    most N - 2 iterations when i = 1. Thus, the overall 
    complexity is in O(N log N).

6.  We have two independent loops. The first loop runs N 
    times, and after its termination we have j = (N-1)*N/2,
    the sum of the first N-1 integers. 
    The second loop terminates when i² ⩰ j, meaning that 
    the second loop is in O(N) as well. 
    Thus, the overall complexity is in O(N). 


