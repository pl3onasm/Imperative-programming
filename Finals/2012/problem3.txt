
Answers

1. c  O(N)
2. a  O(log N)
3. b  O(√N)
4. e  O(N²)
5. d  O(N log N)
6. c  O(N)


Reasoning

1.  Both i and j run through their consecutive values and meet
    each other half way. So the time complexity is in O(N).

2.  In each iteration of the while loop, either the left end i 
    or the right end j is set to the midpoint of the remaining 
    items to consider until there are no more left. So the time
    complexity is in O(log N).

3.  The variable i is incremented until it reaches the square
    root of N: i² = N, i.e. i = √N . Hence, the time complexity 
    is in O(√N).   

4.  In the first for loop, the sum of the first N integers is
    computed and stored in s. So s = N(N+1)/2. In the second
    for loop, the index i is incremented until it reaches s.
    The loops aren't nested, so the time complexity is 
    determined by the loop taking the most iterations, 
    meaning that the overall time complexity is in O(N²).

5.  The outer for loop runs N times. The inner for loop runs
    at most around log N times. So the time complexity is in
    O(N log N), since the loops are nested.

6.  The first for loop runs N times: it sets the values of 
    the items in array a to their respective values. The 
    second loop is nested: the outer loop runs 5 times, while 
    the inner one runs at most N/5 times, so that in total
    the nested loop takes 5 * N/5 = N iterations. Thus, the 
    overall time complexity of the fragment is in O(N).


