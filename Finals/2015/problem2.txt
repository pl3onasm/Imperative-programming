
Answers

1. b  O(√N)
2. e  O(N²)
3. a  O(log N)
4. e  O(N²)
5. c  O(N)
6. d  O(N log N)


Reasoning

1.  At termination of the while loop, s is equal to the sum of the 
    first i integers, which is i(i+1)/2, a value that is dominated 
    by the square term. Thus, the while loop runs in O(√N) time.

2.  The outer for loop runs N times, and the inner for loop runs  
    at most N times (when i = 0). The two loops are nested, so the 
    overall time complexity is in O(N²).

3.  This fragment is similar to the binary search algorithm. If j 
    indicates the right end of the current search interval, and i 
    the left end, then the variable k is set to the midpoint of 
    the interval, (i+j)/2, and either i or j is set to k, thus 
    halving the size of the search interval. The loop terminates 
    when i = j, so the loop runs in O(log N) time.

4.  By the time the first loop terminates, the variable j will
    have the value N*(N+1)/2. The second loop then runs j times.
    The two loops aren't nested, so the overall time complexity
    is determined by the second loop, which runs in O(N²) time.

5.  The for loop will run N/2 times. This means that the loop
    runs in O(N) time.

6.  The outer for loop runs N times, whereas the inner for loop
    runs at most log(N²) = 2*log(N) times. The two loops are 
    nested, so the overall time complexity is in O(N log N) time. 


